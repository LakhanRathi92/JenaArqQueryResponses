import org.apache.jena.query.*;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.RDFNode;

public class Test {
	private static String type = "ttl";
	
	//Query 1: Select all ssn sensors
	private static String query1 = "PREFIX ssn: <http://www.w3.org/2005/Incubator/ssn/ssnx/ssn#>"
			+"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
			+ "SELECT ?sensors"
			+ "Where{"
			+ "?sensors a ssn:Sensor}";
			
	private static String query2 = ""; 
	
	private static String query3 = ""; 
	
	
	
	public static void main(String args[]){
		/**
		 * 
		 * 1) Sample fastRDF description
		 * 2) RDF Literal? 
		 * 3) Solve it locally using a function...  
		 * */
		String fileName = "observations";
		Model m = loadModel(fileName);
		
		m.write(System.out, "TTL") ;
		//RunQuery
		ResultSet results = runQuery(query1, m);		
		
	}
	
	public static Model loadModel(String name){
		Model mod = ModelFactory.createDefaultModel();
		String filename = name+'.'+ type;
		mod.read(filename);
		return mod;
	}
	
	//Takes Query and Model
	public static ResultSet runQuery(String query, Model m){
		try (QueryExecution qexec = QueryExecutionFactory.create(query, m)) {
			  ResultSet results = qexec.execSelect() ;
		      results = ResultSetFactory.copyResults(results) ;
		      return results ;    // Passes the result set out of the try-resources
		  }
	}
	
	//Resolve Results 
	/*
	 * 		for ( ; results.hasNext() ; )
		  {
			  QuerySolution soln = results.nextSolution() ;
			  
		  }

	 * 
	 * 
	 * */
}
