import org.apache.jena.query.*;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.RDFNode;

public class Test {
	private static String type = "ttl";
	
	//Query 1: What sensors do you have? 
	private static String query1 = "PREFIX ssn: <http://www.w3.org/2005/Incubator/ssn/ssnx/ssn#>"
			+"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
			+ "SELECT ?sensors "
			+ "Where{"
			+ "?sensors a ssn:Sensor}";
	
	//Query 2: Get me one particular sensor reading ? 		
	private static String query2 = "PREFIX DUL:   <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl/>"
			+ "SELECT ?measurement "
			+ "Where {"
			+ "<http://www.sensordescription.de/inrdf/SensorTemp> DUL:hasDataValue ?measurement}"; 
	
	//Query 3: Explain it (previous Node) further
	private static String fastRDFQuery = "SELECT ?y ?z "
			+ "Where {"
			+ "_:b0 ?y ?z}";
	
	
		
	private static float publishedValue = (float) 23.0;
	
	public static void main(String args[]){
		/**
		 * 
		 * 1) Sample fastRDF description
		 * 2) RDF Literal? 
		 * 3) Solve it locally using a function...  
		 * */
		String fileName = "observations";
		Model m = loadModel(fileName);
		
		m.write(System.out, "TTL") ;
		//Run Query1 to find available sensors
		ResultSet results = runQuery(query1, m);		
		ResultSetFormatter.out(results);
		
		//Query2 output is an anonymous node itself. 
		
		ResultSet results2 = runQuery(query2, m);
		ResultSetFormatter.out(results2);
		
		//So far it works till we get an anonymous Node. 
		
		
	}
	
	public static Model loadModel(String name){
		Model mod = ModelFactory.createDefaultModel();
		String filename = name+'.'+ type;
		mod.read(filename);
		return mod;
	}
	
	//Takes Query and Model
	public static ResultSet runQuery(String query, Model m){
		try (QueryExecution qexec = QueryExecutionFactory.create(query, m)) {
			  ResultSet results = qexec.execSelect() ;
			  {
				  QuerySolution soln = results.nextSolution() ;
				  for(;results.hasNext();){
					  if(results.toString().startsWith("_")){ // A blank Node
						  /*
						   * Check if its a fastRDF node, if yes the reply appropriately with published value
						   * */
						  if (resolveFastRDF(m, results.toString()))
							return null;
					  }
				  }
			  }
		      results = ResultSetFactory.copyResults(results) ;
		      return results ;    // Passes the result set out of the try-resources
		  }
	}
	
	//we pass the standard query to resovle fastRDF description, with the blank Node ID
	public static Boolean resolveFastRDF(Model m, String NodeID){
		//Query 4 : An internal Query to resolve fastRDFUID and get value against it.
		
		String fastResolveUIDQuery = "PREFIX fastRDF: <http://www.dfki.de/fastRDF/> "
				+ "SELECT ?z "
				+ "Where {"
				+ NodeID + " ?fastRDF:uid ?z }";
		
		return false;
	}
	
	public static void lookUP(int UID){
		
	}
	
}
