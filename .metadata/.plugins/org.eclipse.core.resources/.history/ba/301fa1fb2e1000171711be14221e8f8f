import java.util.Iterator;
import java.util.List;

import org.apache.jena.graph.Node;
import org.apache.jena.query.*;
import org.apache.jena.rdf.model.Literal;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.sparql.core.Var;
import org.apache.jena.rdf.model.impl.PropertyImpl;
public class Test {
	private static String type = "ttl";
	
	//Query 1: What sensors do you have? 
	private static String query1 = "PREFIX ssn: <http://www.w3.org/2005/Incubator/ssn/ssnx/ssn#>"
			+"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
			+ "SELECT ?sensors "
			+ "Where{"
			+ "?sensors a ssn:Sensor}";
	
	//Query 2: Get me one particular sensor reading ? 		
	private static String query2 = "PREFIX DUL:   <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl/>"
			+ "SELECT ?measurement "
			+ "Where {"
			+ "<http://www.sensordescription.de/inrdf/SensorTemp> DUL:hasDataValue ?measurement}"; 
	
	//Query 3: Explain it (previous Node) further (works fine)
	//But Chris said to not make subscriber query any further. 
	
	private static String fastRDFQuery = "SELECT ?y ?z "
			+ "Where {"
			+ "_:b0 ?y ?z}";
	
	private static Property fastRDF = new PropertyImpl("http://www.dfki.de/fastRDF/uid/");
		
	private static float publishedValue = (float) 23.0;
	
	public static void main(String args[]){
		/**
		 * 
		 * 1) Sample fastRDF description
		 * 2) RDF Literal? 
		 * 3) Solve it locally using a function...  
		 * */
		String fileName = "observations";
		Model m = loadModel(fileName);
		
		m.write(System.out) ;
		
		//Run Query1 to find available sensors
		ResultSetRewindable results = runQuery(query1, m);		
		ResultSetFormatter.out(results);
		
		//Query2 output is an anonymous node itself, if not handled by our routine 
		
		ResultSetRewindable results2 = runQuery(query2, m);
		ResultSetFormatter.out(results2);
		results2.reset();
		
		
		for ( ; results2.hasNext() ; )
		  {
			  QuerySolution soln = results2.next() ;
		      Iterator<String> x = soln.varNames();
		      while(x.hasNext()){
		    	  String Col = x.next();
		    	  Resource r = soln.getResource(Col);
		    	  if(r.isAnon())
		    	  {
		    		  System.out.println("Identified Blank Node");
		    		  Statement x = r.getProperty(fastRDF);
		    		  
		    	  }
		      }
		  }
		
	}
	
	public static Model loadModel(String name){
		Model mod = ModelFactory.createDefaultModel();
		String filename = name+'.'+ type;
		mod.read(filename);
		return mod;
	}
	
	//Takes Query and Model
	public static ResultSetRewindable  runQuery(String query, Model m){
	/*	try (QueryExecution qexec = QueryExecutionFactory.create(query, m)) {
			  ResultSet results = qexec.execSelect() ;
			  ResultSet resultXX = ResultSetFactory.copyResults(results) ;
			  for ( ; results.hasNext() ; )
			    {
			     QuerySolution soln = results.nextSolution() ;
			     RDFNode x = soln.get("varName") ;       // Get a result variable by name.			     
			     }  
		      return resultXX;    // Passes the result set out of the try-resources
		  }
		  */
		
		QueryExecution qexec = QueryExecutionFactory.create(query, m) ;
		ResultSet results = qexec.execSelect() ;
		results = ResultSetFactory.copyResults(results);
		//List<String> res = results.getResultVars(); //Column name
		
	
		
		return (ResultSetRewindable) results;
	}
	
	//we pass the standard query to resovle fastRDF description, with the blank Node ID
	public static Boolean resolveFastRDF(Model m, String NodeID){
		//Query 4 : An internal Query to resolve fastRDFUID and get value against it.
		
		String fastResolveUIDQuery = "PREFIX fastRDF: <http://www.dfki.de/fastRDF/> "
				+ "SELECT ?z "
				+ "Where {"
				+ NodeID + " ?fastRDF:uid ?z }";
		try (QueryExecution qexec = QueryExecutionFactory.create(fastResolveUIDQuery, m)) {
		      ResultSet results = qexec.execSelect() ;
		      results = ResultSetFactory.copyResults(results) ;
		      String uid = ResultSetFormatter.asText(results);
		      lookUP(uid);
		  }
		return false;
	}
	
	public static void lookUP(String UID){
		/*
		 * hard coded look up here, at mqtt broker look up in payload against this uid
		 * */
		if(UID.equals("8543"))
			System.out.println(publishedValue); 
	}

}
